/* Includes ------------------------------------------------------------------*/
#include "stm8s.h"
#include "wifi_confg.h"
#include "led.h"
#include "wwdg.h"
/* Private typedef -----------------------------------------------------------*/


/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

static void CLK_Config(void);
static void UART_Config(void);
static void configFlas();
extern uint8_t RxBuffer1[];
void main(void)
{
  /* Infinite loop */
  /* CLK configuration -----------------------------------------*/
  CLK_Config();

  /* UART configuration -----------------------------------------*/
  UART_Config();
  
  LED_Init();
  //LED_Operation(LED_1, ON);
  //LED_Operation(LED_2, OFF);
  asm("rim"); 
  configFlas();
  WWDG_Conf(); 
  setconfigAp();
  lengWifi();
  while (1)
  {
    int i = 0;
    for(i;i<5;i++){
      Refresh_WWDG_Window();
      LED_Operation(LED_2, OFF);
      Delayms(30);
      Refresh_WWDG_Window();
      Delayms(30);
      Refresh_WWDG_Window();
      LED_Operation(LED_2, ON);
      Delayms(30);
      Refresh_WWDG_Window();
      Delayms(30);
    }
    putDate();
    
   // putDate();
  }
  
}

//flase 驱动
static void configFlas()
{
  /* Define flash programming Time*/
  FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);

  FLASH_Unlock(FLASH_MEMTYPE_PROG);
  /* Wait until Flash Program area unlocked flag is set*/
  while (FLASH_GetFlagStatus(FLASH_FLAG_PUL) == RESET)
  {}

  /* Unlock flash data eeprom memory */
  FLASH_Unlock(FLASH_MEMTYPE_DATA);
  /* Wait until Data EEPROM area unlocked flag is set*/
  while (FLASH_GetFlagStatus(FLASH_FLAG_DUL) == RESET)
  {}
}
/**
  * @brief  Configure system clock to run at 16Mhz
  * @param  None
  * @retval None
  */
static void CLK_Config(void)
{
    /* Initialization of the clock */
    /* Clock divider to HSI/1 */
    CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
}

/**
  * @brief  UART1 and UART3 Configuration for half duplex communication
  * @param  None
  * @retval None
  */
static void UART_Config(void)
{
  /* Deinitializes the UART1 and UART3 peripheral */
    UART1_DeInit();
    /* UART1 and UART3 configuration -------------------------------------------------*/
    /* UART1 and UART3 configured as follow:
          - BaudRate = 9600 baud  
          - Word Length = 8 Bits
          - One Stop Bit
          - No parity
          - Receive and transmit enabled
          - UART1 Clock disabled
     */
    /* Configure the UART1 */
    UART1_Init((uint32_t)115200, UART1_WORDLENGTH_8D, UART1_STOPBITS_1, UART1_PARITY_NO,
                UART1_SYNCMODE_CLOCK_DISABLE, UART1_MODE_TXRX_ENABLE);
    
    /* Enable UART1 Transmit interrupt*/
 
    UART1_ITConfig(UART1_IT_RXNE_OR, ENABLE);
    /* Enable general interrupts */
    enableInterrupts();    
}

#ifdef USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *   where the assert_param error has occurred.
  * @param file: pointer to the source file name
  * @param line: assert_param error line source number
  * @retval : None
  */
void assert_failed(u8* file, u32 line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif

/******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
